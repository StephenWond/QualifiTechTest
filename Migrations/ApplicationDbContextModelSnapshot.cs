// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QualifiTest.Data;

#nullable disable

namespace QualifiTest.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QualifiTest.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("QualifiTest.Models.CustomerAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TownCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CustomerAddress");
                });

            modelBuilder.Entity("QualifiTest.Models.LoanProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("MaxSalaryRange")
                        .HasColumnType("float");

                    b.Property<double>("MinSalaryRange")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("LoanProducts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MaxSalaryRange = 20000.0,
                            MinSalaryRange = 10000.0,
                            Name = "Balance Transfer Card",
                            TypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            MaxSalaryRange = 50000.0,
                            MinSalaryRange = 15000.0,
                            Name = "Interest Free Card",
                            TypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            MaxSalaryRange = 100000000.0,
                            MinSalaryRange = 1000000.0,
                            Name = "Millionaire Card",
                            TypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            MaxSalaryRange = 50000.0,
                            MinSalaryRange = 10000.0,
                            Name = "BNPL Finance",
                            TypeId = 2
                        },
                        new
                        {
                            Id = 5,
                            MaxSalaryRange = 750000.0,
                            MinSalaryRange = 250000.0,
                            Name = "Car Finance 5%",
                            TypeId = 3
                        },
                        new
                        {
                            Id = 6,
                            MaxSalaryRange = 1000000.0,
                            MinSalaryRange = 1.0,
                            Name = "Loan Shark Agreement",
                            TypeId = 4
                        });
                });

            modelBuilder.Entity("QualifiTest.Models.LoanProductCustomerHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("LoanProductId")
                        .HasColumnType("int");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LoanProductId");

                    b.ToTable("LoanProductCustomerHistories");
                });

            modelBuilder.Entity("QualifiTest.Models.LoanProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LoanProductType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Credit Card"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Buy Now Pay Later"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Car Finance"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Loan Shark"
                        });
                });

            modelBuilder.Entity("QualifiTest.Models.Customer", b =>
                {
                    b.HasOne("QualifiTest.Models.CustomerAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("QualifiTest.Models.LoanProduct", b =>
                {
                    b.HasOne("QualifiTest.Models.LoanProductType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("QualifiTest.Models.LoanProductCustomerHistory", b =>
                {
                    b.HasOne("QualifiTest.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QualifiTest.Models.LoanProduct", "LoanProduct")
                        .WithMany()
                        .HasForeignKey("LoanProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("LoanProduct");
                });
#pragma warning restore 612, 618
        }
    }
}
